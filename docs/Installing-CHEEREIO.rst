Installing CHEEREIO
==========

Prerequisites
-------------

Because CHEEREIO wraps GEOS-Chem, it requires that your computing environment has the appropriate modules loaded to compile and run GEOS-Chem. Like any model in Earth Science, this task alone can be quite challenging. See the `GEOS-Chem Wiki <http://wiki.seas.harvard.edu/geos-chem/index.php/Getting_Started_with_GEOS-Chem>`__ for the `hardware <http://wiki.seas.harvard.edu/geos-chem/index.php/GEOS-Chem_required_hardware>`__ and `software <http://wiki.seas.harvard.edu/geos-chem/index.php/GEOS-Chem_required_software>`__ requirements. In terms of hardware requirements, you should multiply the recommended resources by roughly 32, which is a standard ensemble size. Because the ensemble is handled as a "job array", this resource requirement will be spread out across 32 jobs that are loosely coordinated; in short, memory can be spread across multiple nodes on your compute cluster.

Beyond the standard GEOS-Chem requirements, CHEEREIO currently requires the SLURM resource manager to handle batch submission. This is because of SLURM's support for job arrays. CHEEREIO also requires the jq module for JSON support, GNU parallel for handling LETKF column-wise updates efficiently, and Anaconda-managed Python with the "cheereio" conda environment, corresponding with the ``cheerio.yaml`` file from the Github repository, already installed. With all these modules loaded in the software environment, CHEEREIO should run without a hitch.

Steps to install
-------------

CHEEREIO installation should be relatively simple if you already have installed GEOS-Chem version 13.0.0 or later on your machine. Follow the steps below:

#. Clone the CHEEREIO `Github repository <https://github.com/drewpendergrass/CHEEREIO>`__ into a permanent directory on your machine.
	#. You will likely need to make changes to the ``observation_operators.py`` script in this repository to allow CHEEREIO to read in your dataset of choice. I would encourage you to add your custom observation operator class on a new branch and make a pull request in the main repository. This will allow the community to make use of your operator and speed up the rate of new research.
#. Clone the GCClassic `Github repository <https://github.com/geoschem/GCClassic>`__ within the CHEEREIO folder and update the submodules. CHEEREIO requires GEOS-Chem version 13.0.0 or later.
#. Modify the ``ens_config.json`` configuration file according to your needs. A considerable amount of scientific thought should go into the modification, as ``ens_config.json`` encodes assumptions about what species your observations will allow you to update. See :ref:`Configuration` for a detailed guide on how to prepare this file so you can get the best results with CHEEREIO.
#. Deploy the ensemble, after reading the :ref:`Deploying the Ensemble` page to understand how this procedure works. Do so by following these steps:
	#. Run ``setup_ensemble.sh`` with ``SetupTemplateRundir`` set to ``true`` and all other main switches set to ``false``. This will create a template run directory that has some important differences from standard GEOS-Chem run directories. ``input.geos``, for example, will have empty tags set at key locations that will allow CHEEREIO to resubmit GEOS-Chem runs for different time periods. ``HEMCO_Config.rc`` is represented by two template files. ``HEMCO_Config_SPINUP_NATURE_TEMPLATE.rc`` is for spinup and "nature" simulations, neither of which include randomized scaling factors. ``HEMCO_Config.rc`` is for ensemble members, all of whom will have perturbed emissions. References to gridded scaling factors are added at key lines in this config file.
	#. **VERIFY THAT ``HEMCO_Config.rc`` IS CORRECT**. In particular, while CHEEREIO does support multiple emissions updates within the same species (for example, updating NO agricultural emissions separately from the rest of NO emissions), it is not capable of distinguishing these kinds of species on its own. Instead, it will just add scaling factor references wherever the species of interest emerges. In this case, user must delete the correct duplicated scaling factor. See the `GEOS-Chem Wiki Page for HEMCO_Config.rc <http://wiki.seas.harvard.edu/geos-chem/index.php/The_HEMCO_Config.rc_file>`__ for more information.
	#. Make any additional changes to the template directory that should be reflected in the ensemble.
	#. Re-run ``setup_ensemble.sh`` with ``SetupTemplateRundir`` set to ``false`` and all other main switches set to ``true``. However, if you are not using a Spinup run, you should set the ``SetupSpinupRun`` switch to ``false``. This will take a while, as it involves compiling GEOS-Chem and copying and modifying large files. You can set the ``CompileTemplateRundir`` switch to ``false`` and compile yourself first if you have custom compile-time settings you wish to invoke.
#. Your ensemble is now built and deployed. ``cd`` to the ``ensemble_runs`` folder and execute the ``run_ens.sh`` file. I prefer to run this with the command ``nohup bash run_ens.sh &``. The SLURM job array is now submitted.
